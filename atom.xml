<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胡萝虎</title>
  <icon>https://www.gravatar.com/avatar/40d7123bf2d5605ede08cfd75ffdb3b9</icon>
  
  <link href="https://huluohu.com/atom.xml" rel="self"/>
  
  <link href="https://huluohu.com/"/>
  <updated>2021-01-04T13:20:49.738Z</updated>
  <id>https://huluohu.com/</id>
  
  <author>
    <name>胡萝虎</name>
    <email>fooololo@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringCloud系列之Zuul自定义</title>
    <link href="https://huluohu.com/2018/05/25/SpringCloud%E7%B3%BB%E5%88%97%E4%B9%8BZuul%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    <id>https://huluohu.com/2018/05/25/SpringCloud%E7%B3%BB%E5%88%97%E4%B9%8BZuul%E8%87%AA%E5%AE%9A%E4%B9%89/</id>
    <published>2018-05-25T03:00:00.000Z</published>
    <updated>2021-01-04T13:20:49.738Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在<a href="https://blog.huluohu.com/2018/05/22/1526976000/">SpringCloud系列之Zuul</a>中我们介绍了Zuul与Spring Cloud整合的应用以及简单配置。Zuul是基于Filter的，通过组合不同的Filter可以实现不同的功能，Spring Cloud整合Zuul后也提供了一些默认的FIlter，如DebugFilter、FormBodyWrapPreFilter、PreDecorationFilter等。实际上，我们也可以编写自己的Filter来实现相应的功能。同时，在Spring Cloud中Zuul通过整合Hystrix也可以实现容错和断路保护。</p></blockquote><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><p>Filter是Zuul的核心组件，不同类型的Filter作用在一个请求的不同生命周期上，具体如下：</p><ul><li><p>PRE</p><p>此类型Filter在请求被路由之前调用。可以应用在身份认证、安全检查、负载均衡等等</p></li><li><p>ROUTING</p><p>此类型Filter实际上就是路由器，用于将请求路由到代理的服务上</p></li><li><p>POST</p><p>此类型Filter在请求被路由到服务后调用，可以用于收集性能指标、增强响应等</p></li><li><p>ERROR</p><p>此类型Filter在其他阶段发送错误时被调用，可以用于记录日志、处理错误等</p></li><li><p>自定义</p><p>除了上面默认的几种Filter，我们也可以自定义类型</p></li></ul><h3 id="自定义Filter"><a href="#自定义Filter" class="headerlink" title="自定义Filter"></a>自定义Filter</h3><p>复制gateway-zuul，改名为gateway-zuul-filter</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/mw690/0079ftwMgy1frnfo70s2hj30oo0qcjtv.jpg"></p><h4 id="创建Filter"><a href="#创建Filter" class="headerlink" title="创建Filter"></a>创建Filter</h4><p>自定义Filter需要继承ZuulFilter抽象类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huluohu.cloud.gateway.infrastructure.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.ZuulFilter;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.context.RequestContext;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreRequestLogFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;pre&quot;</span>; <span class="comment">//filter类型</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//执行顺序</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">//是否执行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//具体逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">        <span class="keyword">final</span> HttpServletRequest request = context.getRequest();</span><br><span class="line"></span><br><span class="line">        log.info(String.format(<span class="string">&quot;send %s request to %s&quot;</span>,request.getMethod(),request.getRequestURL().toString()));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建一个类，继承<code>ZuulFilter</code></li><li>设置Filter类型、执行顺序和是否执行</li><li>编写具体业务逻辑（打印请求日志）</li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在Configuration类中配置自定义Filter</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huluohu.cloud.gateway;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huluohu.cloud.gateway.infrastructure.filter.PreRequestLogFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PreRequestLogFilter <span class="title">preRequestLogFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PreRequestLogFilter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol><li>启动Eureka Server(local profile)</li><li>启动Config Server(不需要区分profile)</li><li>启动provider-user(local profile)</li><li>启动consumer-movie-hystrix-mq(local profile)</li><li>启动gateway-zuul-filter(local profile)</li></ol><ul><li><p>启动应用列表</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/mw690/0079ftwMly1frnfphrudlj30mi06eq3v.jpg"></p></li></ul><ul><li><p>在浏览器中请求<code>http://localhost:6999/movie/test/user/1</code></p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/mw690/0079ftwMly1frnfqj250tj31dm07adjf.jpg"></p><p>可以看到控制台打印了日志</p></li></ul><h2 id="容错与断路保护"><a href="#容错与断路保护" class="headerlink" title="容错与断路保护"></a>容错与断路保护</h2><p>Zuul默认集成了Hystrix，支持容错和断路保护，所以也可以通过Turbine对Hystrix监控数据进行聚合。</p><p>Zuul中的Hystrix监控不同于普通服务的监控，它的粒度是服务级别的，而不是API级别。</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/mw690/0079ftwMly1frnfrc3xiuj32700n0ag3.jpg"></p><p>在Zuul中，回退逻辑需要进行自定义，即实现类实现<code>FallbackProvider</code>接口</p><h3 id="自定义回退逻辑"><a href="#自定义回退逻辑" class="headerlink" title="自定义回退逻辑"></a>自定义回退逻辑</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huluohu.cloud.gateway.infrastructure.fallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.filters.route.FallbackProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieServiceFallbackProvider</span> <span class="keyword">implements</span> <span class="title">FallbackProvider</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientHttpResponse <span class="title">fallbackResponse</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MovieFallbackResponse(cause.getLocalizedMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;consumer-movie&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientHttpResponse <span class="title">fallbackResponse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MovieFallbackResponse(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieFallbackResponse</span> <span class="keyword">implements</span> <span class="title">ClientHttpResponse</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String cause;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MovieFallbackResponse</span><span class="params">(String cause)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.cause = cause;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> HttpStatus <span class="title">getStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> HttpStatus.OK;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRawStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> HttpStatus.OK.value();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getStatusText</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> HttpStatus.OK.getReasonPhrase();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> InputStream <span class="title">getBody</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            builder.append(<span class="string">&quot;Movie 服务不可用&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(<span class="keyword">this</span>.cause)) &#123;</span><br><span class="line">                builder.append(<span class="string">&quot;(&quot;</span> + cause + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            builder.append(<span class="string">&quot;，请稍后再试。&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ByteArrayInputStream(builder.toString().getBytes());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> HttpHeaders <span class="title">getHeaders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">            <span class="keyword">final</span> MediaType mediaType = <span class="keyword">new</span> MediaType(<span class="string">&quot;application&quot;</span>, <span class="string">&quot;json&quot;</span>, Charset.forName(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            headers.setContentType(mediaType);</span><br><span class="line">            <span class="keyword">return</span> headers;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><ul><li><p>关闭consumer-movie-hystrix-mq</p></li><li><p>浏览器中请求<code>http://localhost:6999/movie/test/user/1</code></p><ul><li>错误响应1</li></ul><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/mw690/0079ftwMly1frnfrstqgbj30uw07ugmd.jpg"></p><ul><li>错误响应2</li></ul><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/mw690/0079ftwMly1frnfsdvh6qj3180084gmp.jpg"></p></li><li><p>多次请求zuul，此时可以看到Hystrix监控到了失败情况（失败数量、断路器开启）</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/mw690/0079ftwMly1frnft59tlxj32660lmdlw.jpg"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在&lt;a href=&quot;https://blog.huluohu.com/2018/05/22/1526976000/&quot;&gt;SpringCloud系列之Zuul&lt;/a&gt;中我们介绍了Zuul与Spring Cloud整合的应用以及简单配置。Zuul是基于F</summary>
      
    
    
    
    <category term="Spring Cloud" scheme="https://huluohu.com/categories/Spring-Cloud/"/>
    
    <category term="Spring" scheme="https://huluohu.com/categories/Spring-Cloud/Spring/"/>
    
    
    <category term="Spring Cloud" scheme="https://huluohu.com/tags/Spring-Cloud/"/>
    
    <category term="Spring Boot" scheme="https://huluohu.com/tags/Spring-Boot/"/>
    
    <category term="Spring" scheme="https://huluohu.com/tags/Spring/"/>
    
    <category term="微服务" scheme="https://huluohu.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="Zuul" scheme="https://huluohu.com/tags/Zuul/"/>
    
    <category term="Filter" scheme="https://huluohu.com/tags/Filter/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud系列之Zuul</title>
    <link href="https://huluohu.com/2018/05/22/SpringCloud%E7%B3%BB%E5%88%97%E4%B9%8BZuul/"/>
    <id>https://huluohu.com/2018/05/22/SpringCloud%E7%B3%BB%E5%88%97%E4%B9%8BZuul/</id>
    <published>2018-05-22T08:00:00.000Z</published>
    <updated>2021-01-04T08:40:57.193Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在微服务架构中，各个服务分散部署，每个服务可能会有不同的环境、网络等。而外部客户端可能需要调用多个服务，例如一个电商APP，可能需要调用用户、商品、交易等多个服务才能完成一个业务流程，如果让客户端直接与微服务通信，势必引发许多问题：</p><ul><li>增加客户端请求服务的复杂性，不同的服务地址不同，管理困难</li><li>安全问题，不同的服务需要单独进行安全认证，复杂且不可持久</li><li>重构困难，当业务不断发展，服务可能会发生重新划分，直接导致客户端不可用</li><li>其他…</li></ul></blockquote><p>由于客户端直接与微服务通信存在诸多问题，需要引入一个中间层来解决客户端与微服务的直接耦合，即网关。</p><p>网关介于客户端与微服务之间，所有外部客户端的请求首先到达网关，由网关处理后在发送到微服务，如下图所示：</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79ly1frkis7t6qbj30lv0foglx.jpg" alt="image-20180522164125432"></p><p>网关的作用，就是聚合各个微服务，客户端只跟网关通信，不再直接调用微服务，从而简化客户端的开发。</p><p>##Zuul</p><p>Zuul时Netflix开发的微服务网关框架，它可以很好的与Spring Cloud进行整合，与Eureka、Ribbon、Feign、Hystrix等组件配合使用。Zuul的核心是一系列的Filter，通过组合这些Filter可以完成一系列功能：</p><ul><li>身份认证与安全</li><li>监控</li><li>动态路由</li><li>负载均衡</li><li>压力测试支持</li><li>其他…</li></ul><p>Zuul默认使用Apache的Http Client作为Http客户端，也可以通过配置修改为okhttp或RestClient。</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="Gateway-Zuul"><a href="#Gateway-Zuul" class="headerlink" title="Gateway-Zuul"></a>Gateway-Zuul</h3><p>创建新工程gateway-zuul</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79ly1frkis7n5xnj30p20kcgnb.jpg" alt="image-20180522225721566"></p><h4 id="设置依赖"><a href="#设置依赖" class="headerlink" title="设置依赖"></a>设置依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h4><ul><li><p>bootstrap.yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://localhost:8888</span> <span class="comment"># 配置服务器地址</span></span><br><span class="line">        <span class="attr">fail-fast:</span> <span class="literal">true</span> <span class="comment"># 快速失败</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">$&#123;spring.application.name&#125;</span> <span class="comment">#默认就是spring.application.name</span></span><br><span class="line">        <span class="attr">profile:</span> <span class="string">$&#123;spring.profiles.active:default&#125;</span> <span class="comment"># 默认就是spring.profiles.active</span></span><br><span class="line">        <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#标签</span></span><br><span class="line">        <span class="attr">retry:</span></span><br><span class="line">          <span class="attr">max-attempts:</span> <span class="number">6</span> <span class="comment">#最大重试次数</span></span><br><span class="line">          <span class="attr">max-interval:</span> <span class="number">2000</span> <span class="comment">#间隔时间</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">ignored-services:</span> <span class="string">provider-user</span> <span class="comment">#忽略服务代理，多个用逗号分隔。* 表示忽略所有</span></span><br><span class="line">  <span class="attr">ignored-patterns:</span> <span class="string">/**/admin/**</span> <span class="comment">#忽略包含 /admin/ 的路径</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">consumer-movie:</span> <span class="string">/movie/**</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>application-local.yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6999</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">      <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">service-url:</span></span><br><span class="line">        <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="创建启动类"><a href="#创建启动类" class="headerlink" title="创建启动类"></a>创建启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huluohu.cloud.gateway;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GatewayServer.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol><li>启动Eureka Server(local profile)</li><li>启动Config Server(不需要区分profile)</li><li>启动provider-user-hystrix(local profile)</li><li>启动consumer-movie-hystrix(local profile)</li><li>启动gateway-zuul(local profile)</li></ol><ul><li><p>启动应用列表</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79ly1frkis873s6j30nk09aab0.jpg" alt="image-20180522230817996"></p></li><li><p>在浏览器中输入<code>http://localhost:6999/movie/test/user/1</code>,即可通过网关访问到consumer-movie服务</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79ly1frkis8ox2qj30zy0famyf.jpg" alt="image-20180522230902790"></p></li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ol><li>自定义访问路径</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">consumer-movie:</span> <span class="string">/movie/**</span></span><br></pre></td></tr></table></figure><p>微服务<code>consumer-movie</code>会被映射到<code>/movie/**</code>路径</p><ol start="2"><li>忽略微服务</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">ignored-services:</span> <span class="string">provider-user</span></span><br></pre></td></tr></table></figure><p><code>provider-user</code>微服务不会被zuul代理，可以使用逗号分隔多个服务</p><ol start="3"><li>忽略所有微服务</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">ignored-services:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">  <span class="attr">consumer-movie:</span> <span class="string">/movie/**</span></span><br></pre></td></tr></table></figure><p>忽略所有其他服务，仅代理<code>consumer-movie</code>服务</p><ol start="4"><li>自定义路由</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">movie-route:</span>  <span class="comment">#路由的名称，任意</span></span><br><span class="line">    <span class="attr">service-id:</span> <span class="string">consumer-movie</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/movie/**</span></span><br></pre></td></tr></table></figure><p>效果与<code>1</code>中的配置一样</p><ol start="5"><li>指定微服务地址</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">movie-route:</span>  <span class="comment">#路由的名称，任意</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">http://localhost:9002</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/movie/**</span></span><br></pre></td></tr></table></figure><p>会讲/movie/映射到 <code>http://localhost:9002/**</code>上，但是Hystrix和Ribbon会失效</p><ol start="6"><li>指定微服务地址增强</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">movie-route:</span>  <span class="comment">#路由的名称，任意</span></span><br><span class="line">    <span class="attr">service-id:</span> <span class="string">consumer-movie</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/movie/**</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="attr">ribbom:</span></span><br><span class="line">  <span class="attr">eureka:</span></span><br><span class="line">     <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">consumer-movie:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">listOfServers:</span> <span class="string">localhost:9002</span>  </span><br></pre></td></tr></table></figure><p>通过禁用eureka，然后指定服务列表，可以实现自定义服务地址，同时Hystrix和Robbin不失效</p><ol start="7"><li>前缀设置</li></ol><ul><li>过滤前缀</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">strix-prefix:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">consumer-movie:</span> <span class="string">/movie/**</span></span><br></pre></td></tr></table></figure><p>如果strix-prefix=true, 路径为<code>/movie/**</code> 到达Zuul后会被转发到consumer-movie服务的 <code>/**</code>路径</p><p>如果strix-prefix=true, 路径为<code>/movie/**</code> 到达Zuul后会被转发到consumer-movie服务的 <code>/movie/**</code>路径</p><ul><li>添加前缀</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">strix-prefix:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">api</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">consumer-movie:</span> <span class="string">/movie/**</span></span><br></pre></td></tr></table></figure><p>会对zuul的所有path前面增加一个前缀 /api 如 <code>/consumer-movie/user/1</code> 需要修改为 <code>/api/consumer-movie/user/1</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在微服务架构中，各个服务分散部署，每个服务可能会有不同的环境、网络等。而外部客户端可能需要调用多个服务，例如一个电商APP，可能需要调用用户、商品、交易等多个服务才能完成一个业务流程，如果让客户端直接与微服务通信，势必引发许多问题：&lt;/p&gt;
&lt;ul</summary>
      
    
    
    
    <category term="Spring Cloud" scheme="https://huluohu.com/categories/Spring-Cloud/"/>
    
    <category term="Spring" scheme="https://huluohu.com/categories/Spring-Cloud/Spring/"/>
    
    
    <category term="Spring Cloud" scheme="https://huluohu.com/tags/Spring-Cloud/"/>
    
    <category term="Spring Boot" scheme="https://huluohu.com/tags/Spring-Boot/"/>
    
    <category term="Spring" scheme="https://huluohu.com/tags/Spring/"/>
    
    <category term="微服务" scheme="https://huluohu.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="Zuul" scheme="https://huluohu.com/tags/Zuul/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud系列之Turbine</title>
    <link href="https://huluohu.com/2018/05/16/SpringCloud%E7%B3%BB%E5%88%97%E4%B9%8BTurbine/"/>
    <id>https://huluohu.com/2018/05/16/SpringCloud%E7%B3%BB%E5%88%97%E4%B9%8BTurbine/</id>
    <published>2018-05-16T06:00:00.000Z</published>
    <updated>2021-01-05T03:01:52.818Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在<a href="https://blog.huluohu.com/2018/05/15/1526353200/">SpringCloud系列之Hystrix</a>一文中，我们介绍Hystrix的监控功能。通过在Hystrix Dashboard中访问hystrix.stream端点，可以监控一个应用的断路器情况，但是每次只能监控一个服务。在微服务系统中，一个服务可能被部署多个节点，一个一个查看监控情况显然不合理。所以Spring Cloud为我们提供了一个Hystrix监控聚合工具——Turbine</p></blockquote><h2 id="Turbine"><a href="#Turbine" class="headerlink" title="Turbine"></a>Turbine</h2><p>Turbine是一个Hystrix监控数据聚合工具，可以将应用的<code>hystrix.stream</code>端点的响应数据聚合到一个<code>turbine.stream</code>端点下，方便监控的管理。</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/0081Kckwly1gmcmyzj7t9j326s0nu441.jpg" alt="image-20180516151400970"></p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="Turbine-Server"><a href="#Turbine-Server" class="headerlink" title="Turbine Server"></a>Turbine Server</h3><p>首先创建新工程turbine-server</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79ly1frd9g6h066j30iu0juabj.jpg" alt="image-20180516152233292"></p><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>huluohu-spring-cloud-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.huluohu.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>turbine-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-turbine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.name&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h4><p>bootstrap.yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">turbine-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://localhost:8888</span> <span class="comment"># 配置服务器地址</span></span><br><span class="line">        <span class="attr">fail-fast:</span> <span class="literal">true</span> <span class="comment"># 快速失败</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">$&#123;spring.application.name&#125;</span> <span class="comment">#默认就是spring.application.name</span></span><br><span class="line">        <span class="attr">profile:</span> <span class="string">$&#123;spring.profiles.active:default&#125;</span> <span class="comment"># 默认就是spring.profiles.active</span></span><br><span class="line">        <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#标签</span></span><br><span class="line">        <span class="attr">retry:</span></span><br><span class="line">          <span class="attr">max-attempts:</span> <span class="number">6</span> <span class="comment">#最大重试次数</span></span><br><span class="line">          <span class="attr">max-interval:</span> <span class="number">2000</span> <span class="comment">#间隔时间</span></span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>application-local.yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7776</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">      <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">service-url:</span></span><br><span class="line">        <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">turbine:</span></span><br><span class="line">  <span class="attr">app-config:</span> <span class="string">provider-user,consumer-movie</span> <span class="comment">#设置关注的服务名称</span></span><br><span class="line">  <span class="attr">cluster-name-expression:</span> <span class="string">&quot;&#x27;default&#x27;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="创建启动类"><a href="#创建启动类" class="headerlink" title="创建启动类"></a>创建启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huluohu.cloud.turbine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.turbine.EnableTurbine;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line">@EnableTurbine #启用turbine，同时会启用eureka client</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TurbineServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TurbineServer.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol><li>启动Eureka Server(local profile)</li><li>启动Config Server(不需要区分profile)</li><li>启动provider-user-hystrix(local profile)</li><li>启动consumer-movie-hystrix(local profile)</li><li>启动hystrix-dashboard（不区分profile）</li><li>启动turbine-server(local profile)</li></ol><ul><li><p>应用列表</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79ly1frd9g4n31bj30mu07kmy3.jpg" alt="image-20180516160203104"></p></li><li><p>浏览器中访问<code>http://localhost:7777/hystrix/</code>，打开Hystrix Dashboard</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79ly1frd9g5aauzj31kw0qagss.jpg" alt="image-20180516160404669"></p></li><li><p>在Hystrix Dashboard的url输入框中输入<code>http://localhost:7776/turbine.stream</code>，即Turbine Server的turbine.stream端点，title随便填，点击Monitor Stream</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79ly1frd9g3xckfj31kw0odjxe.jpg" alt="image-20180516160627716"></p></li><li><p>可以看到consumer-movie的Hystrix监控数据已经被聚合了，由于provider-user服务没用启用hystrix，所以这里没有展示出来</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79ly1frd9g6332kj31kw0h8wip.jpg" alt="image-20180516160740571"></p></li></ul><p>在这里，Turbine Server直接通过服务名称从Eureka Server获取服务地址，并聚合服务应用上的Hystrix监控数据。</p><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p>在一些情况下，比如微服务与Turbine Server之间网络不通，则无法通过Turbine对微服务进行监控。这时候可以借助MQ来完成数据的采集，即微服务将Hystrix监控数据发送到MQ，然后Turbine再从MQ订阅消费这些数据，从而实现Hystrix监控。</p><p>以下以RbbitMQ为例进行演示。</p><h3 id="修改微服务"><a href="#修改微服务" class="headerlink" title="修改微服务"></a>修改微服务</h3><p>复制consumer-movie-hystrix，改名为consumer-movie-hystrix-mq</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79ly1frk5tknm7ej30jg0k0tac.jpg" alt="image-20180522152543869"></p><h4 id="修改依赖"><a href="#修改依赖" class="headerlink" title="修改依赖"></a>修改依赖</h4><p>增加以下依赖，原有的依赖保留</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-netflix-hystrix-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><p>application-local.yml新增rabbitmq配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br></pre></td></tr></table></figure><h3 id="修改Turbine-Server"><a href="#修改Turbine-Server" class="headerlink" title="修改Turbine Server"></a>修改Turbine Server</h3><p>复制turbine-server，改名为turbine-server-mq</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79ly1frk5tkwvdrj30ji0luwg7.jpg" alt="image-20180522152854060"></p><p>####修改依赖</p><ul><li><p>增加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-turbine-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>删除依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-turbine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改配置-1"><a href="#修改配置-1" class="headerlink" title="修改配置"></a>修改配置</h4></li></ul><p>application-local.yml增加rabbitmq配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br></pre></td></tr></table></figure><h4 id="修改启动类"><a href="#修改启动类" class="headerlink" title="修改启动类"></a>修改启动类</h4><p>删除<code>@EnableTurbin</code>,增加<code>@EnableTurbineStream</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huluohu.cloud.turbine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.turbine.stream.EnableTurbineStream;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableTurbineStream</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TurbineServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TurbineServer.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><ol><li>启动Eureka Server(local profile)</li><li>启动Config Server(不需要区分profile)</li><li>启动provider-user-hystrix(local profile)</li><li>启动consumer-movie-hystrix-mq(local profile)</li><li>启动hystrix-dashboard（不区分profile）</li><li>启动turbine-server-mq(local profile)</li></ol><ul><li><p>应用列表</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79ly1frk5tle8m9j30ko07qdgo.jpg" alt="image-20180522153610382"></p></li><li><p>浏览器中访问<code>http://localhost:7777/hystrix/</code>，打开Hystrix Dashboard，前面已经介绍过</p></li><li><p>此时，在url输入框中，不再输入Turbine Server的<code>turbine.stream</code>端点，而是直接输入ip和端口即可,这里即是<code>http://localhost:7776</code></p></li><li><p>后续的操作和效果跟本篇上面介绍的一样，不再赘述。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在&lt;a href=&quot;https://blog.huluohu.com/2018/05/15/1526353200/&quot;&gt;SpringCloud系列之Hystrix&lt;/a&gt;一文中，我们介绍Hystrix的监控功能。通过在Hystrix Dashboar</summary>
      
    
    
    
    <category term="Spring Cloud" scheme="https://huluohu.com/categories/Spring-Cloud/"/>
    
    <category term="Spring" scheme="https://huluohu.com/categories/Spring-Cloud/Spring/"/>
    
    
    <category term="Spring Cloud" scheme="https://huluohu.com/tags/Spring-Cloud/"/>
    
    <category term="Spring Boot" scheme="https://huluohu.com/tags/Spring-Boot/"/>
    
    <category term="Spring" scheme="https://huluohu.com/tags/Spring/"/>
    
    <category term="微服务" scheme="https://huluohu.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="Hystrix" scheme="https://huluohu.com/tags/Hystrix/"/>
    
    <category term="Turbine" scheme="https://huluohu.com/tags/Turbine/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud系列之Hystrix</title>
    <link href="https://huluohu.com/2018/05/15/SpringCloud%E7%B3%BB%E5%88%97%E4%B9%8BHystrix/"/>
    <id>https://huluohu.com/2018/05/15/SpringCloud%E7%B3%BB%E5%88%97%E4%B9%8BHystrix/</id>
    <published>2018-05-15T03:00:00.000Z</published>
    <updated>2021-01-04T08:40:57.241Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在分布式系统中，如果服务提供者响应缓慢，会导致消费者请求等待，直到收到响应或超时。如果在高并发、高负载的场景下，会导致消费者大量线程等待服务提供者响应，持续下去的话很容易导致整个系统因为资源耗尽而崩溃。比如，电影服务作为上层的消费者，需要从下层的用户服务查询用户信息，这时候用户服务因为某些原因导致响应非常缓慢，正常只需要10毫秒的响应被延长到几十秒。电影服务持续不断收到外部请求，并等待用户服务响应，很快，电影服务自身也崩溃了。</p><p>因为依赖的服务不可用或不稳定时，导致自身被拖垮，分布式系统中时常会上演，这种情况也被称为“雪崩效应”。</p></blockquote><p>那么，该如何防止雪崩效应呢？一般需要做两点：</p><ul><li>设置网络请求超时时间，尽快释放系统资源，减少不必要的等待</li><li>使用熔断器，为系统安装过载保护功能</li></ul><p>下面我们要介绍的Hystrix就是熔断器的一个实现。</p><h2 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h2><p>Hystrix时Netflix开发的一个容错库，用于隔离远程调用，防止引发级联失败，避免雪崩效应。它类似于电路中的断路器，当系统超过了容忍的错误限度时，开启断路保护，阻止错误放大，从而提升系统的稳定性和容错性。</p><p>Hystrix主要提供以下功能：</p><ul><li>代理请求，即使用HystrixCommand代理调用逻辑</li><li>跳闸保护，当某个依赖服务错误率达到设定的阀值，可以自动或手动开启跳闸，阻止继续请求依赖的服务</li><li>资源隔离，将依赖的服务放到单独的线程池中执行，避免过度资源占有和应用其他模块</li><li>回退机制，即在请求失败、超时、被拒绝等场景下，多断路器打开状态下，执行回退逻辑（快速失败），开发者自定义回退逻辑</li><li>自我修复，即断路器打开一段时间后会自动进入“半开”状态，并测试依赖的服务是否已经恢复，如果恢复，则将断路器关闭，即自动管理断路器的开启、半开和关闭状态</li></ul><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="修改用户服务"><a href="#修改用户服务" class="headerlink" title="修改用户服务"></a>修改用户服务</h3><ul><li><p>服务provider-user，并改名为provider-user-hystrix</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcly1frbvy2q4szj30jc0ne409.jpg" alt="image-20180515113118929"></p></li><li><p>修改用户服务代码</p><p>将findById方法修改成 i&gt;=3时，抛出异常。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huluohu.cloud.user.presentation.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huluohu.cloud.user.presentation.mode.UserDTO;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> AtomicInteger counter = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDTO <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> i = counter.incrementAndGet();</span><br><span class="line">        log.info(<span class="string">&quot;i=========&#123;&#125;&quot;</span>, i);</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;测试断路器&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> UserDTO.builder()</span><br><span class="line">                .id(id)</span><br><span class="line">                .username(<span class="string">&quot;root_&quot;</span> + id)</span><br><span class="line">                .name(<span class="string">&quot;huluohu_&quot;</span> + id)</span><br><span class="line">                .age(random.nextInt(<span class="number">30</span>) % (<span class="number">30</span> - <span class="number">15</span> + <span class="number">1</span>) + <span class="number">15</span>)</span><br><span class="line">                .balance(random.nextLong())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><h3 id="修改电影服务"><a href="#修改电影服务" class="headerlink" title="修改电影服务"></a>修改电影服务</h3></li><li><p>复制consumer-movie-feign，并改名为consumer-movie-hystrix</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcly1frbvy1c0vhj30ja0sw40o.jpg" alt="image-20180515113450657"></p></li><li><p>添加依赖</p><p>pom.xml中增加以下hystrix的依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改配置</p><p>在application-local.yml中增加hystrix配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">   <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启hystrix</span></span><br></pre></td></tr></table></figure></li><li><p>修改启动类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huluohu.cloud.movie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.feign.EnableFeignClients;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.EnableHystrix;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableHystrix</span> <span class="comment">//开启hystrix</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MovieApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加回退逻辑代码</p><p>创建回退逻辑类，该类型需要实现<code>UserServiceClient</code>并增加<code>@Component</code>注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huluohu.cloud.movie.application.client.hystrix;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huluohu.cloud.movie.application.client.UserServiceClient;</span><br><span class="line"><span class="keyword">import</span> com.huluohu.cloud.movie.application.model.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceClientHystrix</span> <span class="keyword">implements</span> <span class="title">UserServiceClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> User.builder()</span><br><span class="line">                .username(<span class="string">&quot;random&quot;</span>)</span><br><span class="line">                .name(<span class="string">&quot;default&quot;</span>)</span><br><span class="line">                .age(<span class="number">0</span>)</span><br><span class="line">                .balance(<span class="number">0L</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置回退逻辑类型</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huluohu.cloud.movie.application.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huluohu.cloud.movie.application.client.hystrix.UserServiceClientHystrix;</span><br><span class="line"><span class="keyword">import</span> com.huluohu.cloud.movie.application.model.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.feign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(serviceId = &quot;provider-user&quot;,fallback = UserServiceClientHystrix.class)</span><span class="comment">//设置回退逻辑类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserServiceClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID查询User</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol><li>启动Eureka Server(local profile)</li><li>启动Config Server(不需要区分profile)</li><li>启动provider-user-hystrix(local profile)</li><li>启动consumer-movie-hystrix(local profile)</li></ol><ul><li><p>启动服务列表</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcly1frbvy0bhpyj30mo06kgma.jpg" alt="image-20180515114648649"></p></li><li><p>服务注册情况</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcly1frbvxzy0lvj31kw08utb2.jpg" alt="image-20180515114702291"></p></li><li><p>测试</p><ul><li><p>使用浏览器或Postman访问<code>http://localhost:9009/test/user/1</code>3次，正常返回用户服务的结果</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcly1frbvy3b3k8j31kw0mgadx.jpg" alt="image-20180515114906873"></p><p>此时，hystrix状态正常，断路器没有打开：</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcly1frbvy1w30hj30v016qtde.jpg" alt="image-20180515115108217"></p></li><li><p>使用Postman Runner快速请求<code>http://localhost:9009/test/user/1</code></p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcly1frbvy0v2y8j30qm156wgi.jpg" alt="image-20180515115157297"></p><p>每次返回的结果都是默认值：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;random&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;balance&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，hystrix的断路器是打开的：</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcly1frbvxzdtzqj30wg16ijwa.jpg" alt="image-20180515115430860"></p></li></ul></li></ul><h2 id="Hystrix监控"><a href="#Hystrix监控" class="headerlink" title="Hystrix监控"></a>Hystrix监控</h2><p>除了提供熔断功能外，Hystrix还提供了实时监控模块，可以对断路器的运行状态和指标进行监控。</p><h3 id="查看Hystrix状态"><a href="#查看Hystrix状态" class="headerlink" title="查看Hystrix状态"></a>查看Hystrix状态</h3><p>在上面的例子中，consumer-movie-hystrix已经整合了Feign和Hystrix，并添加了<code>spring-boot-starter-actuator</code>依赖，可以在浏览器中请求<code>http://localhost:9009/hystrix.stream</code>，查看监控情况：</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79ly1frd1jg509bj31kw0poe81.jpg" alt="image-20180516113722747"></p><p>Hystrix使用hystrix-metrics-event-stream模块实现将监控指标以text/evanet-stream格式输出。</p><h3 id="整合Dashboard"><a href="#整合Dashboard" class="headerlink" title="整合Dashboard"></a>整合Dashboard</h3><p>直接访问<code>http://localhost:9009/hystrix.stream</code>返回的数据不太直观，我们可以通过整合Hystrix Dashboard，让数据可视化。</p><h4 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h4><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79ly1frd1jcbwelj30jo0h2wft.jpg" alt="image-20180516114225734"></p><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>pom.xml添加dashboard依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h4><p>application.yml配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hystrix-dashboard</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7777</span></span><br></pre></td></tr></table></figure><h4 id="创建启动类"><a href="#创建启动类" class="headerlink" title="创建启动类"></a>创建启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huluohu.cloud.hystrix;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixDashboardApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HystrixDashboardApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><ol><li>启动Eureka Server(local profile)</li><li>启动Config Server(不需要区分profile)</li><li>启动provider-user-hystrix(local profile)</li><li>启动consumer-movie-hystrix(local profile)</li><li>启动hystrix-dashboard（不区分profile）</li></ol><ul><li><p>应用列表</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79ly1frd1jdn8d9j30jy06e3z8.jpg" alt="image-20180516114519527"></p></li><li><p>浏览器中打开<code>http://localhost:7777/hystrix</code></p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79ly1frd1jh820rj31kw0nxqaz.jpg" alt="image-20180516114705407"></p></li><li><p>在上面图中url输入框中输入<code>http://localhost:9009/hystrix.stream</code>,Title输入框随意输入一个名字，然后点击<code>Monitor Stream</code>按钮</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79ly1frd1ji3c3qj31ca0vcafh.jpg" alt="image-20180516114909908"></p></li></ul><p>到达监控页面，此时没用请求，监控数据都是初始值。</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79ly1frd1mou7lwj31kw0fn42k.jpg" alt="image-20180516115748805"></p><ul><li><p>在Postman上执行查询用户接口测试，在查看监控页面</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79ly1frd1jjhq7wj31kw0xtjvh.jpg" alt="image-20180516115224242"></p></li></ul><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79ly1frd1jcw01xj31kw0gc0xc.jpg" alt="image-20180516115321177"></p><p>怎么样，很简单吧！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在分布式系统中，如果服务提供者响应缓慢，会导致消费者请求等待，直到收到响应或超时。如果在高并发、高负载的场景下，会导致消费者大量线程等待服务提供者响应，持续下去的话很容易导致整个系统因为资源耗尽而崩溃。比如，电影服务作为上层的消费者，需要从下层的用</summary>
      
    
    
    
    <category term="Spring Cloud" scheme="https://huluohu.com/categories/Spring-Cloud/"/>
    
    <category term="Spring" scheme="https://huluohu.com/categories/Spring-Cloud/Spring/"/>
    
    
    <category term="Spring Cloud" scheme="https://huluohu.com/tags/Spring-Cloud/"/>
    
    <category term="Spring Boot" scheme="https://huluohu.com/tags/Spring-Boot/"/>
    
    <category term="Spring" scheme="https://huluohu.com/tags/Spring/"/>
    
    <category term="微服务" scheme="https://huluohu.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="Feign" scheme="https://huluohu.com/tags/Feign/"/>
    
    <category term="Hystrix" scheme="https://huluohu.com/tags/Hystrix/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud系列之Feign</title>
    <link href="https://huluohu.com/2018/05/14/SpringCloud%E7%B3%BB%E5%88%97%E4%B9%8BFeign/"/>
    <id>https://huluohu.com/2018/05/14/SpringCloud%E7%B3%BB%E5%88%97%E4%B9%8BFeign/</id>
    <published>2018-05-14T03:00:00.000Z</published>
    <updated>2021-01-04T08:40:57.216Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在<a href="https://huluohu.com/2018/05/11/1526043600/">SpringCloud系列之Ribbon</a>一文中我们介绍了使用RestTemplate配合Ribbon实现服务的调用和客户端负载均衡。但是使用RestTemplate调用服务有个弊端，就是参数传递不方便，无论是GET还是POST，都需要对参数进行组装，一旦参数比较多，实际开发时将非常麻烦，而且容易出错。所以，本文将介绍另一种Spring Cloud的服务调用方式——Feign。</p></blockquote><h2 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h2><p>Feign也是Netflix开发的，它是一种声明式、模版化的HTTP客户端，相对于RestTemplate更加便捷、优雅。在Spring Cloud中，我们可以使用Feign非常方便的创建服务调用的模版代码，配合相关的注解，完成配置。</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="修改provider-user服务"><a href="#修改provider-user服务" class="headerlink" title="修改provider-user服务"></a>修改provider-user服务</h3><h4 id="增加测试接口"><a href="#增加测试接口" class="headerlink" title="增加测试接口"></a>增加测试接口</h4><p>增加<code>新增用户</code>和<code>设置用户name</code>接口，其他都不需要修改</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huluohu.cloud.user.presentation.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huluohu.cloud.user.presentation.mode.UserDTO;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDTO <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UserDTO.builder()</span><br><span class="line">            .id(id)</span><br><span class="line">            .username(<span class="string">&quot;root_&quot;</span> + id)</span><br><span class="line">            .name(<span class="string">&quot;huluohu_&quot;</span> + id)</span><br><span class="line">            .age(random.nextInt(<span class="number">30</span>) % (<span class="number">30</span> - <span class="number">15</span> + <span class="number">1</span>) + <span class="number">15</span>)</span><br><span class="line">            .balance(random.nextLong())</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping()</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">add</span><span class="params">(UserDTO user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> random.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置用户name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">setName</span><span class="params">(<span class="meta">@PathVariable</span> Integer id, <span class="meta">@RequestParam(&quot;name&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;id=&#123;&#125;&quot;</span>, id);</span><br><span class="line">        log.info(<span class="string">&quot;name=&#123;&#125;&quot;</span>, name);</span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建Feign测试工程"><a href="#创建Feign测试工程" class="headerlink" title="创建Feign测试工程"></a>创建Feign测试工程</h3><h4 id="consuer-movie-feign"><a href="#consuer-movie-feign" class="headerlink" title="consuer-movie-feign"></a>consuer-movie-feign</h4><p>复制<code>consuer-movie module</code>，修改名称为<code>consuer-movie-feign</code></p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/mw690/0079ftwMgy1frawm502w3j30j20kcabs.jpg"></p><h4 id="新增依赖"><a href="#新增依赖" class="headerlink" title="新增依赖"></a>新增依赖</h4><p>在pom.xml下增加Feign的依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改启动类"><a href="#修改启动类" class="headerlink" title="修改启动类"></a>修改启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huluohu.cloud.movie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.feign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.huluohu.cloud.movie.application.client&quot;)</span> <span class="comment">//启用feign</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MovieApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="增加服务调用代码"><a href="#增加服务调用代码" class="headerlink" title="增加服务调用代码"></a>增加服务调用代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huluohu.cloud.movie.application.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huluohu.cloud.movie.application.model.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.feign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(serviceId = &quot;provider-user&quot;)</span><span class="comment">//设置服务提供者名称</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserServiceClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID查询User</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增User</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function">Integer <span class="title">addUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user/&#123;id&#125;&quot;, method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="function">Boolean <span class="title">setName</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id, <span class="meta">@RequestParam(&quot;name&quot;)</span> String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="增加测试代码"><a href="#增加测试代码" class="headerlink" title="增加测试代码"></a>增加测试代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huluohu.cloud.movie.presentation.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huluohu.cloud.movie.application.client.UserServiceClient;</span><br><span class="line"><span class="keyword">import</span> com.huluohu.cloud.movie.application.model.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceClient userServiceClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">testFindUser</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> User user = userServiceClient.findById(id);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">testAddUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(userServiceClient.addUser(user));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">testSetName</span><span class="params">(<span class="meta">@PathVariable</span> Integer id, <span class="meta">@RequestParam(&quot;name&quot;)</span> String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(userServiceClient.setName(id, name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>配置文件和consumer-movie中的一样。</p><p>到此，准备工作都已经完成了，下面开始测试。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol><li>启动Eureka Server(local profile)</li><li>启动Config Server(不需要区分profile)</li><li>启动provider-user(local profile)</li><li>启动provider-user(local2 profile，模拟多节点)</li><li>启动consumer-movie-feign(local profile)</li></ol><ul><li><p>启动应用列表</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/mw690/0079ftwMgy1frawm59bmkj30lo07egmp.jpg"></p></li><li><p>服务注册情况</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/mw690/0079ftwMgy1frawm648jlj322o0fo776.jpg"></p></li><li><p>测试结果(使用Postman测试)</p><ul><li><p>查询用户</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/mw690/0079ftwMgy1frawm5pnf6j31qk0qwn1k.jpg"></p></li><li><p>新增用户</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/mw690/0079ftwMgy1frawm6jumdj31qk0oq0wb.jpg"></p></li><li><p>设置用户名称</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/mw690/0079ftwMgy1frawm71czpj31qi0mgdjb.jpg"></p></li></ul></li></ul><p>以上三个测试，分别测试三种参数传递的情况：</p><ol><li>查询用户，测试通过<code>GET</code>方式，使用<code>@PathVariable</code>注解从请求URL中获取参数</li><li>新增用户，测试通过<code>POST</code>方式，使用<code>@RequestBody</code>注解传递多个参数的情况</li><li>设置用户name，测试通过<code>PUT</code>方式，使用<code>@RequestParam</code>传递单个参数的情况</li></ol><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p>在Spring Cloud中，支持对Feign进行自定义配置，包括编码器、解码器、契约、拦截器等进行自定义：</p><ul><li>Decoder</li><li>Encoder</li><li>Logger</li><li>Contract</li><li>Feign.Builder</li><li>Client</li></ul><p>还有一些Bean在Spring Cloud中没有提供默认的实现，但是如果在应用上下文中存在这些实现，也会被Feign应用：</p><ul><li>Logger.Level</li><li>Retryer</li><li>ErrorDecoder</li><li>Request.Options</li><li>Collection<RequestInterceptor></RequestInterceptor></li><li>SetterFactory</li></ul><p>如果需要自定义以上Bean，可以创建一个Configuration类，然后设置到FeignClient即可：</p><p>配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Contract <span class="title">feignContract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> feign.Contract.Default();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BasicAuthRequestInterceptor <span class="title">basicAuthRequestInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BasicAuthRequestInterceptor(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;password&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(name = &quot;provider-user&quot;, configuration = UserServiceConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserServiceClient</span> </span>&#123;</span><br><span class="line">    <span class="comment">//..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在&lt;a href=&quot;https://huluohu.com/2018/05/11/1526043600/&quot;&gt;SpringCloud系列之Ribbon&lt;/a&gt;一文中我们介绍了使用RestTemplate配合Ribbon实现服务的调用和客户端负载均衡。</summary>
      
    
    
    
    <category term="Spring Cloud" scheme="https://huluohu.com/categories/Spring-Cloud/"/>
    
    <category term="Spring" scheme="https://huluohu.com/categories/Spring-Cloud/Spring/"/>
    
    
    <category term="Spring Cloud" scheme="https://huluohu.com/tags/Spring-Cloud/"/>
    
    <category term="Spring Boot" scheme="https://huluohu.com/tags/Spring-Boot/"/>
    
    <category term="Spring" scheme="https://huluohu.com/tags/Spring/"/>
    
    <category term="微服务" scheme="https://huluohu.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="Feign" scheme="https://huluohu.com/tags/Feign/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud系列之Ribbon</title>
    <link href="https://huluohu.com/2018/05/11/SpringCloud%E7%B3%BB%E5%88%97%E4%B9%8BRibbon/"/>
    <id>https://huluohu.com/2018/05/11/SpringCloud%E7%B3%BB%E5%88%97%E4%B9%8BRibbon/</id>
    <published>2018-05-11T13:00:00.000Z</published>
    <updated>2021-01-04T08:40:57.229Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在以往的文章中我们已经介绍了Spring Cloud框架中的Eureka（服务注册/发现）、Config（中心化配置管理）的简单使用，接下来将要介绍如何创建服务提供者、服务消费者，以及如何实现服务调用。在Spring Cloud中，服务间的RPC是通过Http实现的，服务提供者开放Restful接口，消费者可以使用RestTemplate或其他客户端调用接口。</p><p>在微服务系统中，服务启动后会注册到注册/发现服务器上，同时也会从注册/发现服务器上获取所需的服务列表。同一个服务可能会存在多个甚至数以十计百计个节点，这时候消费者如果还是通过简单的Http客户端消费服务，显然难以实现有效的负载均衡。那么Spring Cloud时如何处理服务调用的负载均衡的呢？</p></blockquote><h2 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h2><p>Ribbon时Netflix开发的负载均衡实现，默认支持轮询、随机等算法，使用者也可以自定义实现自己的算法。在Spring Cloud中可以和Eureka配合使用，从Eureka Server获取服务列表后，完成请求的负载均衡。</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="创建主项目"><a href="#创建主项目" class="headerlink" title="创建主项目"></a>创建主项目</h3><p>为了演示方便，笔者将Eureka Server、Config Server、服务提供者和服务消费者都创建在一个大的Maven工程下，结构如下：</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fr7rn8wapvj30jq08gwfc.jpg" alt="image-20180511211933987"></p><p>根目录下的pom.xml如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.huluohu.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>huluohu-spring-cloud-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>eureka-server<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>config-server-git<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>provider-user<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>consumer-movie<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.16.20<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>1.5.10.RELEASE<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Edgware.SR3<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--公共依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--监控--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--测试依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Edgware.SR3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>build-info<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建服务提供者"><a href="#创建服务提供者" class="headerlink" title="创建服务提供者"></a>创建服务提供者</h3><p>这里以用户服务为例<code>provider-user</code></p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fr7rnbkk7lj30io0jwdh1.jpg" alt="image-20180511211438605"></p><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>huluohu-spring-cloud-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.huluohu.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>provider-user<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.name&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建启动类"><a href="#创建启动类" class="headerlink" title="创建启动类"></a>创建启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huluohu.cloud.user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(UserApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建配置"><a href="#创建配置" class="headerlink" title="创建配置"></a>创建配置</h4><ul><li><p>bootstrap.yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">provider-user</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">rabbitmq.huluohu.com</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">32602</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://localhost:8888</span> <span class="comment"># 配置服务器地址</span></span><br><span class="line">        <span class="attr">fail-fast:</span> <span class="literal">true</span> <span class="comment"># 快速失败</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">$&#123;spring.application.name&#125;</span> <span class="comment">#默认就是spring.application.name</span></span><br><span class="line">        <span class="attr">profile:</span> <span class="string">$&#123;spring.profiles.active:default&#125;</span> <span class="comment"># 默认就是spring.profiles.active</span></span><br><span class="line">        <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#标签</span></span><br><span class="line">        <span class="attr">retry:</span></span><br><span class="line">          <span class="attr">max-attempts:</span> <span class="number">6</span> <span class="comment">#最大重试次数</span></span><br><span class="line">          <span class="attr">max-interval:</span> <span class="number">2000</span> <span class="comment">#间隔时间</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>application-local.yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span> <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">      <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">service-url:</span></span><br><span class="line">        <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span> <span class="comment">#eureka server地址</span></span><br></pre></td></tr></table></figure></li><li><p>application-local2.yml</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 9002 #服务端口</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">      prefer-ip-address: <span class="keyword">true</span></span><br><span class="line">  client:</span><br><span class="line">      register-with-eureka: <span class="keyword">true</span></span><br><span class="line">      fetch-registry: <span class="keyword">true</span></span><br><span class="line">      service-url:</span><br><span class="line">        defaultZone: http:<span class="comment">//localhost:8761/eureka/ #eureka server地址</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="创建用户查询服务"><a href="#创建用户查询服务" class="headerlink" title="创建用户查询服务"></a>创建用户查询服务</h3><ul><li><p>UserDTO</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huluohu.cloud.user.presentation.mode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Long balance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>UserController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huluohu.cloud.user.presentation.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huluohu.cloud.user.presentation.mode.UserDTO;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDTO <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UserDTO.builder()</span><br><span class="line">                .id(id)</span><br><span class="line">                .username(<span class="string">&quot;root_&quot;</span> + id)</span><br><span class="line">                .name(<span class="string">&quot;huluohu_&quot;</span> + id)</span><br><span class="line">                .age(random.nextInt(<span class="number">30</span>) % (<span class="number">30</span> - <span class="number">15</span> + <span class="number">1</span>) + <span class="number">15</span>)</span><br><span class="line">                .balance(random.nextLong())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="创建服务消费者"><a href="#创建服务消费者" class="headerlink" title="创建服务消费者"></a>创建服务消费者</h3><p>这里以电影服务为例<code>consumer-movie</code></p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fr7rna6m9jj30im0qc40c.jpg" alt="image-20180511214254881"></p><h4 id="pom-xml-1"><a href="#pom-xml-1" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>huluohu-spring-cloud-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.huluohu.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>consumer-movie<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.name&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于<code>spring-cloud-starter-eureka</code>已经包含了spring-cloud-starter-ribbon的依赖，这里就不用单独添加了。</p><h4 id="创建启动类-1"><a href="#创建启动类-1" class="headerlink" title="创建启动类"></a>创建启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huluohu.cloud.movie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MovieApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建配置-1"><a href="#创建配置-1" class="headerlink" title="创建配置"></a>创建配置</h4><ul><li><p>bootstrap.yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer-movie</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">rabbitmq.huluohu.com</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">32602</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://localhost:8888</span> <span class="comment"># 配置服务器地址</span></span><br><span class="line">        <span class="attr">fail-fast:</span> <span class="literal">true</span> <span class="comment"># 快速失败</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">$&#123;spring.application.name&#125;</span> <span class="comment">#默认就是spring.application.name</span></span><br><span class="line">        <span class="attr">profile:</span> <span class="string">$&#123;spring.profiles.active:default&#125;</span> <span class="comment"># 默认就是spring.profiles.active</span></span><br><span class="line">        <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#标签</span></span><br><span class="line">        <span class="attr">retry:</span></span><br><span class="line">          <span class="attr">max-attempts:</span> <span class="number">6</span> <span class="comment">#最大重试次数</span></span><br><span class="line">          <span class="attr">max-interval:</span> <span class="number">2000</span> <span class="comment">#间隔时间</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>application-local.yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9009</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">      <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">service-url:</span></span><br><span class="line">        <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span> <span class="comment">#eureka server地址</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="创建测试代码"><a href="#创建测试代码" class="headerlink" title="创建测试代码"></a>创建测试代码</h4><ul><li><p>配置RestTemplate并启用Ribbon</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huluohu.cloud.movie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span> <span class="comment">//启动负载均衡（Ribbon实现）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>创建服务Facade</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huluohu.cloud.movie.application.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huluohu.cloud.movie.application.model.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//provider-user为用户服务的服务主机名称，通过该名称从eureka获取服务列表</span></span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://provider-user/&quot;</span> + id, User.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>创建测试服务</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huluohu.cloud.movie.presentation.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huluohu.cloud.movie.application.model.User;</span><br><span class="line"><span class="keyword">import</span> com.huluohu.cloud.movie.application.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">testFindUser</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> User user = userService.findById(id);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol><li>启动Eureka Server(local profile)</li><li>启动Config Server(不需要区分profile)</li><li>启动provider-user(local profile)</li><li>启动provider-user(local2 profile，模拟多节点)</li><li>启动consumer-movie(local profile)</li></ol><ul><li>启动应用列表</li></ul><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fr7rn94ilej30o00e6abd.jpg" alt="image-20180511220649099"></p><ul><li>服务注册情况</li></ul><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fr7rnawjsfj31kw0hcq97.jpg" alt="image-20180511221749856"></p><ul><li>测试结果</li></ul><p>在浏览器中访问<code>http://localhost:9009/test/user/1</code>，访问consumer-movie中的测试接口，结果如下</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fr7rn9s34tj30yw0g4abg.jpg" alt="image-20180511220803523"></p><p><strong>consumer-movie通过RestTemplate的负载均衡，调用了provide-user的一个节点，并获取数据。</strong></p><p>Robbin的简单使用到此介绍完了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在以往的文章中我们已经介绍了Spring Cloud框架中的Eureka（服务注册/发现）、Config（中心化配置管理）的简单使用，接下来将要介绍如何创建服务提供者、服务消费者，以及如何实现服务调用。在Spring Cloud中，服务间的RPC是</summary>
      
    
    
    
    <category term="Spring Cloud" scheme="https://huluohu.com/categories/Spring-Cloud/"/>
    
    <category term="Spring" scheme="https://huluohu.com/categories/Spring-Cloud/Spring/"/>
    
    
    <category term="Spring Cloud" scheme="https://huluohu.com/tags/Spring-Cloud/"/>
    
    <category term="Spring Boot" scheme="https://huluohu.com/tags/Spring-Boot/"/>
    
    <category term="Spring" scheme="https://huluohu.com/tags/Spring/"/>
    
    <category term="微服务" scheme="https://huluohu.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="Ribbon" scheme="https://huluohu.com/tags/Ribbon/"/>
    
    <category term="RestTemplate" scheme="https://huluohu.com/tags/RestTemplate/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud系列之Config自动刷新</title>
    <link href="https://huluohu.com/2018/05/07/SpringCloud%E7%B3%BB%E7%BB%9F%E4%B9%8BConfig%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0/"/>
    <id>https://huluohu.com/2018/05/07/SpringCloud%E7%B3%BB%E7%BB%9F%E4%B9%8BConfig%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0/</id>
    <published>2018-05-07T08:00:00.000Z</published>
    <updated>2021-01-04T08:40:57.199Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在上一篇<a href="https://huluohu.com/2018/04/28/1524898800/">SpringCloud系列之Config</a>中，我们介绍了如何使用Spring Cloud Config来搭建一套配置管理系统。通过Spring Cloud Config的Server和Client组件，可以完成配置的管理、获取和刷新。在处理配置刷新时，需要先修改配置，然后再手工发送POST请求到Client端的刷新端点上，这种方式虽然可以实现不停机变更配置的目的，但是在微服务架构下的生产环境中却并不优雅。</p><p>当生产环境中部署了大量应用时，如果还是通过人工的方式，一台台的去刷新显然不太合理。没有人愿意做这种费力又容易出错的事情！那么，在Spring Cloud Config下如何实现自动刷新配置呢？答案是<code>Spring Cloud Bus</code>。</p></blockquote><h2 id="Spring-Cloud-Bus"><a href="#Spring-Cloud-Bus" class="headerlink" title="Spring Cloud Bus"></a>Spring Cloud Bus</h2><p>Spring Cloud Bus 是Spring Cloud对事件、消息总线的封装，它将分布式系统中的各个节点使用轻量级的消息代理连接起来，用于在集群（例如，配置变化事件）中传播状态变化，可与Spring Cloud Config联合实现热部署。</p><p>Spring Cloud Bus需要利用MQ进行事件、消息的传播与处理，目前常用的是RabbitMQ和Kafka，本文中涉及的MQ为RabbitMQ。所以，在开始之前，读者需要先安装RabbitMQ，由于不是本文的重点，在此不多赘述。</p><h2 id="自动刷新原理"><a href="#自动刷新原理" class="headerlink" title="自动刷新原理"></a>自动刷新原理</h2><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fr2yhrkgpvj31700w40wl.jpg" alt="image-20180507164059085"></p><p>使用Spring Cloud Bus完成配置自动刷新的大致流程如下：</p><ol><li>修改并PUSH配置，触发web hook，POST请求到Config Server的 bus/refresh端点</li><li>Config Server向MQ发送配置变更消息</li><li>Client集群中的实例订阅并接收到MQ投递的消息</li><li>Client集群中的实例消费消息，从Config Server获取新配置，并刷新本地配置</li></ol><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h4 id="准备RabbitMQ"><a href="#准备RabbitMQ" class="headerlink" title="准备RabbitMQ"></a>准备RabbitMQ</h4><p>建议读者使用Docker进行安装，方便快捷，此处不深入介绍。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d --name rabbitmq -p 4369:4369 -p 5671:5671 -p 15672:15671 -p 16572:15672 rabbitmq:3-management </span><br></pre></td></tr></table></figure><h4 id="配置Config-Server"><a href="#配置Config-Server" class="headerlink" title="配置Config Server"></a>配置Config Server</h4><p>Config Server不需要做太多修改，仅需要增加必要的依赖和配置即可。</p><p>pom.xml增加依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yml增加RabbitMQ和security配置:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-server</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">rabbitmq.huluohu.com</span> <span class="comment">#rabbitmq的地址（IP、域名、host等）</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">32602</span> <span class="comment">#端口</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span><span class="comment">#用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span><span class="comment">#密码</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span> <span class="comment">#需要设置为false</span></span><br></pre></td></tr></table></figure><h4 id="配置Client应用"><a href="#配置Client应用" class="headerlink" title="配置Client应用"></a>配置Client应用</h4><p>与Config Server类似，进行添加必要的依赖和配置。</p><p>pom.xml增加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yml增加RabbitMQ和security配置:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8088</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">rabbitmq.huluohu.com</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">32602</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="配置webhook"><a href="#配置webhook" class="headerlink" title="配置webhook"></a>配置webhook</h4><p>github和gitlab都支持webhook，这里我使用的是gitlab。如果读者手头没有webhook环境，也可以使用Postman工具模拟。</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fr2yhnycoij31kw0hiq9f.jpg" alt="image-20180507180948522"></p><p>⚠️10.242.14.174是我的机器IP，这里设置的是Config Server端端点，在gitlab中需要进行一点设置才可以访问局域网IP。</p><ul><li>使用root账户登录</li><li>点击Admin area—&gt;Settings，在 Outbound requests下将<code>Allow request to the local network from hooks and  services</code>勾选</li></ul><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fr2yhpleh3j31kw08dgnq.jpg" alt="image-20180507181230600"></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ul><li><p>启动Config Server应用</p></li><li><p>启动Config Client应用（config-example以local profile启动)</p></li><li><p>修改spring-cloud-config-repo下config-example目录中的application-local.properties文件，修改完push到git仓库</p></li><li><p>浏览器中访问<code>http://localhost:8088/test/config</code>，可以看到配置已变更。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在上一篇&lt;a href=&quot;https://huluohu.com/2018/04/28/1524898800/&quot;&gt;SpringCloud系列之Config&lt;/a&gt;中，我们介绍了如何使用Spring Cloud Config来搭建一套配置管理系统。通</summary>
      
    
    
    
    <category term="Spring Cloud" scheme="https://huluohu.com/categories/Spring-Cloud/"/>
    
    <category term="Spring" scheme="https://huluohu.com/categories/Spring-Cloud/Spring/"/>
    
    
    <category term="Spring Cloud" scheme="https://huluohu.com/tags/Spring-Cloud/"/>
    
    <category term="Spring Boot" scheme="https://huluohu.com/tags/Spring-Boot/"/>
    
    <category term="Spring" scheme="https://huluohu.com/tags/Spring/"/>
    
    <category term="微服务" scheme="https://huluohu.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="Config" scheme="https://huluohu.com/tags/Config/"/>
    
    <category term="Bus" scheme="https://huluohu.com/tags/Bus/"/>
    
    <category term="rabbitmq" scheme="https://huluohu.com/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud系列之Config</title>
    <link href="https://huluohu.com/2018/04/28/SpringCloud%E7%B3%BB%E7%BB%9F%E4%B9%8BConfig/"/>
    <id>https://huluohu.com/2018/04/28/SpringCloud%E7%B3%BB%E7%BB%9F%E4%B9%8BConfig/</id>
    <published>2018-04-28T07:00:00.000Z</published>
    <updated>2021-01-04T08:40:57.209Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>相对于单体应用，微服务架构下的应用粒度小、部署实例的量级和复杂度大大增加。这时候，应用的配置如果还是和应用打包在一起部署，势必会造成维护和变更困难，难以支持业务的快速变化。因而，有必对配置进行集中化管理，以利于持续的维护。目前，比较成熟的集中式配置管理方案有几种，如Disconf、Diamond、Apollo，以及直接使用Zookeeper、Consul等中间件。在Spring Cloud技术栈中，官方为我们提供了一个新的选择：Spring Cloud Config。</p></blockquote><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>Spring Cloud Config由Config Server和Config Client组成，前者用于对配置数据进行管理，后者用于获取配置及处理配置变更。Config Server支持横向扩展，默认支持Git存储配置数据（也支持SVN和文件存储）。下面以Git作为存储方式来详细介绍。</p><div id="sequence-0"></div><p>​                        <strong>Spring Cloud Config配置获取时序图</strong></p><h4 id="创建Git-Repo"><a href="#创建Git-Repo" class="headerlink" title="创建Git Repo"></a>创建Git Repo</h4><p>创建一个Git Repository，读者可以使用Github、Coding或自己搭建Gitlib等方式，很简单，这里就不再赘述。</p><h4 id="准备配置文件"><a href="#准备配置文件" class="headerlink" title="准备配置文件"></a>准备配置文件</h4><p>创建完Repository后，再创建config-example目录，如下图所示：</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79gy1fqslbm05mrj31kw0ml0xn.jpg" alt="创建应用目录"></p><p>然后再创建文件application-local.properties和application-test.properties，如下图</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79gy1fqslbnunf6j31kw0h4gq1.jpg" alt="创建应用配置"></p><p>application-local.preperties内容：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">fooololo.host</span>=<span class="string">local.huluohu.com</span></span><br><span class="line"><span class="meta">fooololo.username</span>=<span class="string">local</span></span><br><span class="line"><span class="meta">fooololo.password</span>=<span class="string">123</span></span><br></pre></td></tr></table></figure><p>application-test.properties内容：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">fooololo.host</span>=<span class="string">test.huluohu.com</span></span><br><span class="line"><span class="meta">fooololo.username</span>=<span class="string">test</span></span><br><span class="line"><span class="meta">fooololo.password</span>=<span class="string">123</span></span><br></pre></td></tr></table></figure><h2 id="搭建ConfigServer"><a href="#搭建ConfigServer" class="headerlink" title="搭建ConfigServer"></a>搭建ConfigServer</h2><h4 id="创建Maven工程"><a href="#创建Maven工程" class="headerlink" title="创建Maven工程"></a>创建Maven工程</h4><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79gy1fqslbmzbcbj30js0gg75l.jpg" alt="创建ConfigServer工程"></p><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建启动类"><a href="#创建启动类" class="headerlink" title="创建启动类"></a>创建启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huluohu.cloud.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigServer.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加应用配置"><a href="#添加应用配置" class="headerlink" title="添加应用配置"></a>添加应用配置</h4><p>在src/main/resources目录下创建bootstrap.yml，内容如下</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server:</span></span><br><span class="line">          <span class="attr">bootstrap:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">git:</span></span><br><span class="line">            <span class="attr">uri:</span> <span class="string">https://github.com/fooololo/spring-cloud-config-repo</span></span><br><span class="line">            <span class="attr">username:</span> <span class="comment">#git仓库的账号</span></span><br><span class="line">            <span class="attr">password:</span> <span class="comment">#git仓库的密码</span></span><br><span class="line">            <span class="attr">search-paths:</span> <span class="string">&#x27;&#123;application&#125;&#x27;</span>  <span class="comment">#  根据application的名称搜索目录</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中spring.cloud.config.server.git为上面创建的Git Repository的URL，username和password为你的Git账户名和密码。</p><p>在src/main/resources目录下创建application.yml，内容如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-server</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br></pre></td></tr></table></figure><h4 id="启动并测试Config-Server"><a href="#启动并测试Config-Server" class="headerlink" title="启动并测试Config Server"></a>启动并测试Config Server</h4><p>在浏览器中输入：<code>http://localhost:8888/config-example/local/</code></p><p>返回的是config-example目录下application-local.properties配置文件中的内容</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79gy1fqslblixp6j31ko0qsn21.jpg" alt="local环境配置"></p><p>在浏览器中输入：<code>http://localhost:8888/config-example/test/</code></p><p>返回的是config-example目录下application-testp.roperties配置文件中的内容</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79gy1fqslbkp2ugj31hq0r4gpq.jpg" alt="test环境配置"></p><h2 id="创建ConfigClient-应用"><a href="#创建ConfigClient-应用" class="headerlink" title="创建ConfigClient 应用"></a>创建ConfigClient 应用</h2><h4 id="创建Maven工程-1"><a href="#创建Maven工程-1" class="headerlink" title="创建Maven工程"></a>创建Maven工程</h4><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fqx21q76m7j30hm0eiq3s.jpg" alt="image-20180502141827430"></p><h4 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建启动类-1"><a href="#创建启动类-1" class="headerlink" title="创建启动类"></a>创建启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huluohu.cloud.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigClientApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加应用配置-1"><a href="#添加应用配置-1" class="headerlink" title="添加应用配置"></a>添加应用配置</h4><h5 id="bootstarp"><a href="#bootstarp" class="headerlink" title="bootstarp"></a>bootstarp</h5><p>在src/main/resources目录下创建bootstrap.yml，内容如下</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-example</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://localhost:8888</span> <span class="comment"># 配置服务器地址</span></span><br><span class="line">        <span class="attr">fail-fast:</span> <span class="literal">true</span> <span class="comment"># 快速失败</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">$&#123;spring.application.name&#125;</span> <span class="comment">#默认就是spring.application.name</span></span><br><span class="line">        <span class="attr">profile:</span> <span class="string">$&#123;spring.profiles.active:default&#125;</span> <span class="comment"># 默认就是spring.profiles.active</span></span><br><span class="line">        <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#标签</span></span><br><span class="line">        <span class="attr">retry:</span></span><br><span class="line">          <span class="attr">max-attempts:</span> <span class="number">6</span> <span class="comment">#最大重试次数</span></span><br><span class="line">          <span class="attr">max-interval:</span> <span class="number">2000</span> <span class="comment">#间隔时间</span></span><br></pre></td></tr></table></figure><p><code>spring.cloud.config.url</code>配置的是上面我们搭建的Config Server的地址</p><p>其他参数默认可以不单独配置，其中重试和快速失败等配置不是必须的。</p><h5 id="应用配置"><a href="#应用配置" class="headerlink" title="应用配置"></a>应用配置</h5><p>在src/main/resources目录下创建application.yml，内容如下</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8088</span></span><br></pre></td></tr></table></figure><h4 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h4><p>编写一个controller，用来测试读取远程配置（也可以直接使用Junit进行测试），代码如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huluohu.cloud.config.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//远程配置的key</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;fooololo.host&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//远程配置的key</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;fooololo.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//远程配置的key</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;fooololo.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/config&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, String&gt;&gt; testConfig() &#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        map.put(<span class="string">&quot;host&quot;</span>, host);</span><br><span class="line">        map.put(<span class="string">&quot;userName&quot;</span>, userName);</span><br><span class="line">        map.put(<span class="string">&quot;password&quot;</span>, password);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="启动测试应用"><a href="#启动测试应用" class="headerlink" title="启动测试应用"></a>启动测试应用</h5><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fqx21s29hcj31kw0kfn1h.jpg" alt="image-20180502142744596"></p><p>分别使用local和test profile启动应用，然后在浏览器中访问<code>http://localhost:8088/test/config</code></p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fqx21qu84oj31kw0cpqc8.jpg" alt="image-20180502143131562"></p><p><strong>启动的时候可以看到应用会先从远处服务器拉取配置</strong></p><h5 id="local-profile的结果"><a href="#local-profile的结果" class="headerlink" title="local profile的结果"></a>local profile的结果</h5><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fqx21rewabj30xk0de0tp.jpg" alt="image-20180502143017837"></p><h5 id="test-profile的结果"><a href="#test-profile的结果" class="headerlink" title="test profile的结果"></a>test profile的结果</h5><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fqx21nua6tj30yo0c8gmk.jpg" alt="image-20180502143252735"></p><h2 id="刷新配置"><a href="#刷新配置" class="headerlink" title="刷新配置"></a>刷新配置</h2><p>应用发布上线以后，现在需要修改一个配置参数，例如将<code>fooololo.password</code>修改为<code>456</code>,这时候应该如何让修改生效呢？</p><h4 id="增加依赖"><a href="#增加依赖" class="headerlink" title="增加依赖"></a>增加依赖</h4><p>在Config Client应用中增加以下依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br></pre></td></tr></table></figure><h4 id="增加刷新注解"><a href="#增加刷新注解" class="headerlink" title="增加刷新注解"></a>增加刷新注解</h4><p>在TestController类上增加<code>@RefreshScope</code>注解，表示该类中使用<code>@Value</code>注解的配置项可能动态刷新</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;fooololo.host&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;fooololo.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;fooololo.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/config&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, String&gt;&gt; testConfig() &#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        map.put(<span class="string">&quot;host&quot;</span>, host);</span><br><span class="line">        map.put(<span class="string">&quot;userName&quot;</span>, userName);</span><br><span class="line">        map.put(<span class="string">&quot;password&quot;</span>, password);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><p>在application.yml中增加以下配置：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ul><li>首先重启Config Client（以local profile为例）应用，即config-example，这时候访问<code>http://localhost:8088/test/config</code>获得<code>password=123</code></li><li>接着修改spring-cloud-config-repo仓库中config-example目录下application-local.properties中的<code>fooololo.password=456</code></li><li>然后使用Postman或其他工具，向<code>http://localhost:8088/refresh</code>发送一个POST请求</li><li>最后再重新访问<code>http://localhost:8088/test/config</code>，可以看到<code>password</code>的值已经为<code>456</code>了</li></ul><p>Spring Cloud Config的简单配置已经介绍完了，在实际生产环境中，可能会需要更复杂的设置，读者可以在此基础上继续探索，找到适合自己的最佳实践！</p><script src="https://cdn.bootcss.com/webfont/1.6.28/webfontloader.js"></script><script src="https://cdn.bootcss.com/raphael/2.2.7/raphael.min.js"></script><script src="https://cdn.bootcss.com/underscore.js/1.8.3/underscore-min.js"></script><script src="https://cdn.bootcss.com/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">Config Client->Config Server: 获取配置Config Server-> Git Repo: 拉取配置数据Git Repo-->Config Server: 返回配置数据Config Server->Config Server: 缓存配置数据Config Server-->Config Client: 响应配置</textarea><textarea id="sequence-0-options" style="display: none">{"theme":"simple"}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;相对于单体应用，微服务架构下的应用粒度小、部署实例的量级和复杂度大大增加。这时候，应用的配置如果还是和应用打包在一起部署，势必会造成维护和变更困难，难以支持业务的快速变化。因而，有必对配置进行集中化管理，以利于持续的维护。目前，比较成熟的集中式配置</summary>
      
    
    
    
    <category term="Spring Cloud" scheme="https://huluohu.com/categories/Spring-Cloud/"/>
    
    <category term="Spring" scheme="https://huluohu.com/categories/Spring-Cloud/Spring/"/>
    
    
    <category term="Spring Cloud" scheme="https://huluohu.com/tags/Spring-Cloud/"/>
    
    <category term="Spring Boot" scheme="https://huluohu.com/tags/Spring-Boot/"/>
    
    <category term="Spring" scheme="https://huluohu.com/tags/Spring/"/>
    
    <category term="微服务" scheme="https://huluohu.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="集群" scheme="https://huluohu.com/tags/%E9%9B%86%E7%BE%A4/"/>
    
    <category term="Config" scheme="https://huluohu.com/tags/Config/"/>
    
  </entry>
  
  <entry>
    <title>鲜春</title>
    <link href="https://huluohu.com/2018/04/27/%E9%B2%9C%E6%98%A5/"/>
    <id>https://huluohu.com/2018/04/27/%E9%B2%9C%E6%98%A5/</id>
    <published>2018-04-27T07:00:00.000Z</published>
    <updated>2021-01-04T08:40:57.205Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来几张以前拍的照片，鲜不鲜</p></blockquote><p><img src="/images/loading.gif" data-original="https://ws4.sinaimg.cn/large/006tNc79gy1fqr800qq7kj30sg0lcwi0.jpg" alt="麦田边的野花"></p><p><img src="/images/loading.gif" data-original="https://ws4.sinaimg.cn/large/006tNc79gy1fqr7zzuwzgj31ao0z0gqo.jpg" alt="圆明园中的桃花"></p><p><img src="/images/loading.gif" data-original="https://ws3.sinaimg.cn/large/006tNc79gy1fqr7zylpx9j31ao0z0q9a.jpg" alt="家乡的河畔"></p><p><img src="/images/loading.gif" data-original="https://ws3.sinaimg.cn/large/006tNc79gy1fqr8h2uvmuj31kw23vhdt.jpg" alt="西湖边的梅花"></p><p><img src="/images/loading.gif" data-original="https://ws4.sinaimg.cn/large/006tNc79gy1fqr8h09af4j31kw23vb2a.jpg" alt="上海某地的喇叭花"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;来几张以前拍的照片，鲜不鲜&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/loading.gif&quot; data-original=&quot;https://ws4.sinaimg.cn/large/006tNc79gy1fqr</summary>
      
    
    
    
    <category term="摄影" scheme="https://huluohu.com/categories/%E6%91%84%E5%BD%B1/"/>
    
    <category term="图片" scheme="https://huluohu.com/categories/%E6%91%84%E5%BD%B1/%E5%9B%BE%E7%89%87/"/>
    
    
    <category term="春天" scheme="https://huluohu.com/tags/%E6%98%A5%E5%A4%A9/"/>
    
    <category term="花" scheme="https://huluohu.com/tags/%E8%8A%B1/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud系列之Eureka集群</title>
    <link href="https://huluohu.com/2018/04/19/SpringCloud%E7%B3%BB%E5%88%97%E4%B9%8BEureka%E9%9B%86%E7%BE%A4/"/>
    <id>https://huluohu.com/2018/04/19/SpringCloud%E7%B3%BB%E5%88%97%E4%B9%8BEureka%E9%9B%86%E7%BE%A4/</id>
    <published>2018-04-19T09:00:00.000Z</published>
    <updated>2021-01-04T08:40:57.235Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在**<a href="https://huluohu.com/2018/04/18/1524020400/">SpringCloud系列之Eureka</a>**中介绍了如何搭建起Eureka Server以及创建Eureka Client(服务提供者)。在微服务架构中，Eureka Server作为服务注册与发现的核心组件，单机无法保证服务的高可用。因而在实际生产环境中通过实现Eureka Server集群部署来实现高可用性。</p></blockquote><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>开始之前，需要先创建Eureka Server和Eureka Client应用，具体方法详见：**<a href="https://huluohu.com/2018/04/18/1524020400/">SpringCloud系列之Eureka</a>**。</p><h2 id="配置Eureka-Server"><a href="#配置Eureka-Server" class="headerlink" title="配置Eureka Server"></a>配置Eureka Server</h2><p>在项目的src/main/resource目录下创建application-cluster1.yml和application-cluster2.yml，两个文件的配置分别如下：</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fqi8ju4s68j30ik0hkta5.jpg" alt="image-20180419193734139"></p><p><strong>application-cluster1.yml</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">cluster2</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">60000</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8762/eureka/</span> <span class="comment">#配置的是cluster2的地址</span></span><br><span class="line">  <span class="attr">datacenter:</span> <span class="string">机房1</span></span><br></pre></td></tr></table></figure><p><strong>application-cluster2.yml</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">cluster2</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8762</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">60000</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span> <span class="comment">#配置的是cluster1的地址</span></span><br><span class="line">  <span class="attr">datacenter:</span> <span class="string">机房2</span></span><br></pre></td></tr></table></figure><p>两个配置文件的主要差异就是，application-cluster1.yml中eureka.client.service-url.defaultZone配置的是cluster2的地址，而application-cluster2.yml中eureka.client.service-url.defaultZone配置的是cluster1的地址，另外就是启动的端口不同。</p><h2 id="配置Eureka-Client"><a href="#配置Eureka-Client" class="headerlink" title="配置Eureka Client"></a>配置Eureka Client</h2><p>在项目的src/main/resources目录下创建application-cluster.yml</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fqi8jqrerpj30io0ckmy3.jpg" alt="image-20180419194703780"></p><p><strong>application-cluster.yml</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">cluster</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">      <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">service-url:</span></span><br><span class="line">        <span class="attr">defaultZone:</span> <span class="string">http://localhost:8762/eureka/,http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><p>将eureka.client.service-url.defaultZone设置为Eureka Server的cluster1和cluster2的地址，用逗号分隔。</p><h2 id="验证集群"><a href="#验证集群" class="headerlink" title="验证集群"></a>验证集群</h2><ul><li><strong>将Eureka Server应用的active profiles分别设置为cluster1和cluster2并启动：</strong></li></ul><h4 id="cluster1"><a href="#cluster1" class="headerlink" title="cluster1"></a>cluster1</h4><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fqi8jo8t2qj31kw0l5dkf.jpg" alt="image-20180419195104027"></p><h4 id="cluster2"><a href="#cluster2" class="headerlink" title="cluster2"></a>cluster2</h4><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fqi8jryj9rj31kw0meq7s.jpg" alt="image-20180419195229224"></p><p>⚠️注意：在非IDE中可以通过java启动参数修改active profiles: <strong>-Dspring.profiles.active=xxx</strong></p><ul><li><strong>将Eureka Client应用的active profiles设置为cluster并启动:</strong></li></ul><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fqi8jp4alhj31kw0q6gr0.jpg" alt="image-20180419195742618"></p><ul><li><strong>最后，分别在浏览器中打开localhost:8761和localhost:8762:</strong></li></ul><h4 id="localhost-8761"><a href="#localhost-8761" class="headerlink" title="localhost:8761"></a>localhost:8761</h4><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fqi8jt17bfj31kw0mzn3h.jpg" alt="image-20180419201915581"></p><h4 id="localhost-8762"><a href="#localhost-8762" class="headerlink" title="localhost:8762"></a>localhost:8762</h4><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fqi8jq52brj31kw0mutgm.jpg" alt="image-20180419201935911"></p><p>可以看到Eureka Client（PROVIDER-APPLICATION）应用已经分别注册到两台Eureka Server上了。</p><p>当然，在实际生产环境中，建议部署3个或以上的Eureka Server节点，这时候Eureka Client最好配置2个或以上的Eureka Server节点作为defaultZone，以增加可靠性和稳定性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在**&lt;a href=&quot;https://huluohu.com/2018/04/18/1524020400/&quot;&gt;SpringCloud系列之Eureka&lt;/a&gt;**中介绍了如何搭建起Eureka Server以及创建Eureka Client(服务</summary>
      
    
    
    
    <category term="Spring Cloud" scheme="https://huluohu.com/categories/Spring-Cloud/"/>
    
    <category term="Spring" scheme="https://huluohu.com/categories/Spring-Cloud/Spring/"/>
    
    
    <category term="Spring Cloud" scheme="https://huluohu.com/tags/Spring-Cloud/"/>
    
    <category term="Spring Boot" scheme="https://huluohu.com/tags/Spring-Boot/"/>
    
    <category term="Spring" scheme="https://huluohu.com/tags/Spring/"/>
    
    <category term="Eureka" scheme="https://huluohu.com/tags/Eureka/"/>
    
    <category term="微服务" scheme="https://huluohu.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="集群" scheme="https://huluohu.com/tags/%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud系列之Eureka</title>
    <link href="https://huluohu.com/2018/04/18/SpringCloud%E7%B3%BB%E5%88%97%E4%B9%8BEureka/"/>
    <id>https://huluohu.com/2018/04/18/SpringCloud%E7%B3%BB%E5%88%97%E4%B9%8BEureka/</id>
    <published>2018-04-18T03:00:00.000Z</published>
    <updated>2021-01-04T08:40:57.219Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Spring Cloud是目前非常流行的微服务框架。它不是一种技术，而是一系列框架的集合。它基于分别实现不同的功能，包括配置管理，服务发现，断路器，智能路由，网关，控制总线，一次性令牌，全局锁，领导选举，分布式会话，监控等。</p></blockquote><h2 id="常用的Spring-Cloud组件"><a href="#常用的Spring-Cloud组件" class="headerlink" title="常用的Spring Cloud组件"></a>常用的Spring Cloud组件</h2><ul><li><p>Spring Cloud Netflix(<a href="https://github.com/spring-cloud/spring-cloud-netflix">https://github.com/spring-cloud/spring-cloud-netflix</a>)</p><p>是对Netflix开发的一套分布式服务框架的封装，包括服务的发现和注册，负载均衡、断路器、REST客户端、请求路由等。</p></li><li><p>Spring Cloud Config(<a href="https://github.com/spring-cloud/spring-cloud-config">https://github.com/spring-cloud/spring-cloud-config</a>)</p><p>将配置信息中央化（如文件系统、SVN、Git等）保存, 配置Spring Cloud Bus可以实现动态修改配置文件</p></li><li><p>Spring Cloud Security(<a href="https://github.com/spring-cloud/spring-cloud-security">https://github.com/spring-cloud/spring-cloud-security</a>)</p><p>对Spring Security的封装，并能配合Netflix使用。</p></li></ul><p><strong>下面从搭建Eureka Server开始介绍</strong></p><blockquote><p>Spring Cloud Eureka是Spring Cloud Netflix微服务套件中的一部分，它基于Netflix Eureka做了二次封装。主要负责完成微服务架构中的服务治理功能，包括服务注册和服务发现。</p></blockquote><h2 id="搭建Eureka-Server"><a href="#搭建Eureka-Server" class="headerlink" title="搭建Eureka Server"></a>搭建Eureka Server</h2><h4 id="创建Maven工程"><a href="#创建Maven工程" class="headerlink" title="创建Maven工程"></a>创建Maven工程</h4><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79gy1fqgwjt0q61j30io0aoaak.jpg" alt="image-20180418160917476"></p><h4 id="添加依赖（配置pom-xml"><a href="#添加依赖（配置pom-xml" class="headerlink" title="添加依赖（配置pom.xml)"></a>添加依赖（配置pom.xml)</h4><ul><li><p>添加Spring Boot依赖支持</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>添加Spring Cloud依赖支持</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Edgware.SR3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>添加相关依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>配置Build属性</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>build-info<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="创建启动类"><a href="#创建启动类" class="headerlink" title="创建启动类"></a>创建启动类</h4><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79gy1fqgwjs3ox9j30im0coaat.jpg" alt="image-20180418161522527"></p><p>在src/main/java目录下创建一个包，并创建类<strong>EurekaServer</strong>（类名随你意），类的内容如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huluohu.cloud.eureka;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaServer.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加应用配置"><a href="#添加应用配置" class="headerlink" title="添加应用配置"></a>添加应用配置</h4><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79gy1fqgwjuxicuj30iq0emjsh.jpg" alt="image-20180418161850291"></p><p>在src/main/resources目录下，创建application.yml（或application.properties)配置文件,添加以下内容：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br></pre></td></tr></table></figure><p>同时，在src/main/resources目录下在创建一个application-local.yml（或application-local.properties)文件，其中local后缀表示profile(spring boot的环境区分，这里用local表示本地环境，你也可以改成dev、test等你认为合理的后缀)，并添加以下内容：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">local</span> <span class="comment">#环境</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#是否使用IP</span></span><br><span class="line">    <span class="attr">metadata-map:</span></span><br><span class="line">      <span class="attr">instanceId:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;spring.profiles&#125;:$&#123;spring.cloud.client.ipAddress&#125;:$&#123;server.port&#125;</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;spring.profiles&#125;:$&#123;spring.cloud.client.ipAddress&#125;:$&#123;server.port&#125;</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span> <span class="comment">#是否开启自我保护模式</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">10000</span> <span class="comment">#剔除时间间隔</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>  <span class="comment"># 是否将自己注册到Eureka</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span><span class="comment"># 是否从Eureka拉取信息</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:$&#123;server.port&#125;/eureka/</span>  <span class="comment"># 单机默认配置为localhost:port</span></span><br></pre></td></tr></table></figure><h4 id="启动Eureka-Server"><a href="#启动Eureka-Server" class="headerlink" title="启动Eureka Server"></a>启动Eureka Server</h4><p>现在相关配置都已经完成了，可以启动Eureka Server。</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79gy1fqgwjphlwxj31da0egdke.jpg" alt="image-20180418162946394"></p><p>点击IDEA的Run—&gt;Run…—&gt;Edit Configurations…</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79gy1fqgwju8b53j31kw139dm5.jpg" alt="image-20180418163205347"></p><p>点击+号，选择Spring Boot，然后在上图中选择Main Class为我们创建的EurekaServer类型,Active profiles填写为local，然后点击Apply按钮，并点击Run按钮。</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79gy1fqgwjoorm1j31kw0jc1cj.jpg" alt="image-20180418163544563"></p><p>启动完成！</p><h5 id="在浏览器中输入http-localhost-8761"><a href="#在浏览器中输入http-localhost-8761" class="headerlink" title="在浏览器中输入http://localhost:8761"></a>在浏览器中输入<a href="http://localhost:8761/">http://localhost:8761</a></h5><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tNc79gy1fqgwjr3j8aj31kw0s7air.jpg" alt="image-20180418163612200"></p><h2 id="创建Eureka-Client-服务提供者"><a href="#创建Eureka-Client-服务提供者" class="headerlink" title="创建Eureka Client(服务提供者)"></a>创建Eureka Client(服务提供者)</h2><h4 id="创建maven项目"><a href="#创建maven项目" class="headerlink" title="创建maven项目"></a>创建maven项目</h4><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fqhtcyz887j30iq0bo3z8.jpg" alt="image-20180419113135333"></p><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>discovery-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.huluohu.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>spring-boot和spring-cloud配置参考上面Euerka Sevrer部分。</p><h4 id="创建启动类-1"><a href="#创建启动类-1" class="headerlink" title="创建启动类"></a>创建启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huluohu.cloud.provider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProviderApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>方法同创建EurekaServer一样。</p><h4 id="添加应用配置-1"><a href="#添加应用配置-1" class="headerlink" title="添加应用配置"></a>添加应用配置</h4><p>在src/main/resources目录下 创建application.yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">provider-application</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">      <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span> <span class="comment">#注册到eureka</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment">#从eureka拉取信息</span></span><br><span class="line">      <span class="attr">service-url:</span></span><br><span class="line">        <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span>  <span class="comment"># 设置为eureka-server的地址</span></span><br></pre></td></tr></table></figure><h4 id="启动ProviderApplication"><a href="#启动ProviderApplication" class="headerlink" title="启动ProviderApplication"></a>启动ProviderApplication</h4><p>方法同启动EurekaServer一样</p><p>这时候在浏览器中刷新之前的Eureka Server页面，可以看到ProviderApplication已经注册到Eureka Server上了：</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fqhtd001auj31kw0n4n3y.jpg" alt="image-20180419113915390"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Spring Cloud是目前非常流行的微服务框架。它不是一种技术，而是一系列框架的集合。它基于分别实现不同的功能，包括配置管理，服务发现，断路器，智能路由，网关，控制总线，一次性令牌，全局锁，领导选举，分布式会话，监控等。&lt;/p&gt;
&lt;/block</summary>
      
    
    
    
    <category term="Spring Cloud" scheme="https://huluohu.com/categories/Spring-Cloud/"/>
    
    <category term="Spring" scheme="https://huluohu.com/categories/Spring-Cloud/Spring/"/>
    
    
    <category term="Spring Cloud" scheme="https://huluohu.com/tags/Spring-Cloud/"/>
    
    <category term="Spring Boot" scheme="https://huluohu.com/tags/Spring-Boot/"/>
    
    <category term="Spring" scheme="https://huluohu.com/tags/Spring/"/>
    
    <category term="Eureka" scheme="https://huluohu.com/tags/Eureka/"/>
    
    <category term="微服务" scheme="https://huluohu.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>自定义hexo博客域名</title>
    <link href="https://huluohu.com/2018/04/16/%E8%87%AA%E5%AE%9A%E4%B9%89hexo%E5%8D%9A%E5%AE%A2%E5%9F%9F%E5%90%8D/"/>
    <id>https://huluohu.com/2018/04/16/%E8%87%AA%E5%AE%9A%E4%B9%89hexo%E5%8D%9A%E5%AE%A2%E5%9F%9F%E5%90%8D/</id>
    <published>2018-04-16T11:00:00.000Z</published>
    <updated>2021-01-04T08:40:57.213Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在<a href="https://huluohu.com/2018/04/11/1523419200/">github上搭建hexo博客教程</a>中介绍了如何通过Hexo+Github Pages搭建一套自己的博客系统，并通过<strong>xxx.github.io</strong>的方式访问。不过这个地址是github提供的子域名，不容易与别人的博客地址区分开来，也无法彰显你的个性😊。这时候，如果你有自己的域名，可以通过绑定域名的方式，通过你自己的域名来访问你的博客，是不是更有意思呢？</p><p>下面我们以阿里云域名解析为例，介绍如何自定义Hexo博客域名。</p></blockquote><h2 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h2><ul><li><p>首先，在博客工程的根目录的source目录下创建CNAME文件</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fqeqyyg24sj30me0bgq5k.jpg" alt="image-20180416194503172"></p></li><li><p>然后，在CNAME文件中输入你的域名，如 <strong>huluohu.com</strong>，不需要<strong>http://**或</strong>www**前缀:</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fqeqyxg0amj30jy068q2x.jpg" alt="image-20180416194700434"></p></li><li><p>最后，重新发布一次博客到Github</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure></li></ul><h2 id="配置域名解析"><a href="#配置域名解析" class="headerlink" title="配置域名解析"></a>配置域名解析</h2><p>Hexo配置完以后，接下来就可以配置域名解析了。</p><ul><li><p>首先登录阿里云控制台，找到你的域名（首先你得购买域名）</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fqeqyuvh10j31kw05f754.jpg" alt="image-20180416195053564"></p></li><li><p>然后点击<strong>解析</strong>—&gt;<strong>添加解析</strong></p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fqeqyvo6l6j31kw0mwjvj.jpg" alt="image-20180416195154185"></p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fqeqywjlo3j31600pi411.jpg" alt="image-20180416195330603"></p><p>记录类型选择<strong>CNAME</strong></p><p>主机记录输入**@**</p><p>记录值输入你的Github Pages域名，我的是fooololo.github.io</p><p>最后点击确认。</p></li><li><p>同样的，再添加一条解析，记录类型还是CNAME，记录值跟上面的一样，而主机记录输入www或者你想设置的值，这样别人想要访问你的博客时，通过<a href="http://www.xxx.com或xxx.com都可以访问到./">www.xxx.com或xxx.com都可以访问到。</a></p></li><li><p>最后，稍等一会，然后在浏览器上输入你自己的域名，是不是已经可以访问到你的博客了呢！very good!</p></li></ul><p>至此，自定义hexo博客域名的设置都已经完成了，赶快试试吧！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在&lt;a href=&quot;https://huluohu.com/2018/04/11/1523419200/&quot;&gt;github上搭建hexo博客教程&lt;/a&gt;中介绍了如何通过Hexo+Github Pages搭建一套自己的博客系统，并通过&lt;strong&gt;x</summary>
      
    
    
    
    <category term="其他" scheme="https://huluohu.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    <category term="前端" scheme="https://huluohu.com/categories/%E5%85%B6%E4%BB%96/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="hexo" scheme="https://huluohu.com/tags/hexo/"/>
    
    <category term="github" scheme="https://huluohu.com/tags/github/"/>
    
    <category term="pages" scheme="https://huluohu.com/tags/pages/"/>
    
    <category term="域名" scheme="https://huluohu.com/tags/%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>在github上搭建hexo博客教程</title>
    <link href="https://huluohu.com/2018/04/11/%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    <id>https://huluohu.com/2018/04/11/%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</id>
    <published>2018-04-11T04:00:00.000Z</published>
    <updated>2021-01-04T08:40:57.225Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。Hexo相对于wordpress更加轻量，且不需要数据库，比较适合没有服务器的爱好者。以下是我自己实际安装部署的过程，分享给大家。<br>Github Pages可以被认为是用户编写的、托管在github上的静态网页。</p></blockquote><a id="more"></a><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p><a href="https://git-scm.com/downloads">git下载</a>，大家根据自己的系统下载相应安装包安装即可，这里就不详细介绍了。</p><p><a href="https://git-scm.com/book/zh/v2">git教程</a>，如果不熟悉git，可以先简单看下教程。</p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>Hexo基于Node.js开发，因此开始Hexo之前还需要先安装<a href="https://nodejs.org/en/download/">Node.js</a>,大家到这个地址下载相应版本安装即可，不再赘述。Linux用户建议使用<a href="https://github.com/creationix/nvm">nvm</a>安装，Mac用户建议使用<a href="https://brew.sh/">Homebrew</a>安装。</p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>准备完git和Node.js后，可以正式开始Hexo了。 </p><ul><li>首先安装Hexo: </li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure><p>-g 表示全局安装。 </p><ul><li>初始化Hexo  </li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/workspace</span><br><span class="line">$ hexo init hexo-blog</span><br></pre></td></tr></table></figure><p>到工作目录（可以按自己情况确定），然后初始化hexo,<strong>hexo-blog</strong> 是项目的名称，自由确定。<br>此时，已经在workspace目录下生成了一个新的工程：<strong>hexo-blog</strong>。<br>工程结构如下：<br><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fq8p7zb15bj30ji0awabx.jpg" alt="mage-20180411142600"></p><ul><li><p>启动Hexo</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>然后在浏览器中输入：localhost:4000 即可进行访问。</p></li></ul><h3 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h3><ol><li><p>申请Github账号，这个就不介绍了</p></li><li><p>创建repsoitory</p><ul><li>在你的Github主页，点击New repository 按钮</li></ul><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fq8r3x6xmlj30l8076gm6.jpg" alt="mage-20180411143202"></p><p>​</p><ul><li>设置Repository</li></ul><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fq8r3zylyej30l405ajrp.jpg" alt="mage-20180411143352"></p><p><strong>注意：</strong> Repository name一定要是你的github账号的ID加上github.io，否则不会生效。此处我的github账号ID为fooololo，所以Repository name为fooololo.github.io</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fq8r3y7xvoj316g0mqwhf.jpg" alt="mage-20180411143614"></p><p><strong>Description</strong>随便填，勾选<strong>Public</strong>，然后点击<strong>Create repsository</strong>按钮即可。</p></li><li><p>生成SSH key</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ~&#x2F;.ssh</span><br><span class="line">$ ssh-keygen -t rsa -C &quot;xxx@gmail.com&quot;</span><br></pre></td></tr></table></figure><p>然后一路回车，这时候会在~/.ssh目录下生成id_rsa和id_rsa.pub两个文件，前者是私钥，后者是公钥。</p></li><li><p>将公钥添加到Github</p><ul><li>到Github的settings页面-&gt;SSH and GPC keys</li></ul><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fq8r3zce8xj31kw0vp7bx.jpg" alt="mage-20180411150751"></p><ul><li><p>创建新的SSH key</p><p>title任意填，key的内容就是前面生成的公钥文件中的内容，拷过来直接粘贴就好。</p></li></ul></li><li><p>配置Hexo</p><p>在工程的根目录下找到<strong>_config.yml</strong>,找到deploy项，编辑如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/xxx/xxx.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">  message: deploy</span><br></pre></td></tr></table></figure><p><strong>type</strong>设置为git</p><p><strong>repo</strong>设置为上面创建的Repository的地址</p><p><strong>branch</strong>设置为master</p><p><strong>message</strong>可以随便填或忽略</p></li><li><p>安装deploy扩展</p><p>接下来安装部署扩展，帮助我们在生成静态页面后自动部署到Github(或其他托管服务)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/workspace/hexo-blog</span><br><span class="line">$ npm install hexo-deploy-git --save</span><br></pre></td></tr></table></figure></li><li><p>生成并部署博客</p><p>现在终于可以发布博客了，执行以下命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/workspace/hexo-blog</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>如果不报错，就OK了，这时候在浏览器中输入<strong><a href="http://xxx.github.io/">http://xxx.github.io</a></strong>(xxx为你的Github账号ID)，就可以访问到你的博客了。</p><p>我使用的是<a href="https://github.com/Haojen/hexo-theme-Anisina">Anisina</a>主题，效果如下：</p><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fqaybyfj6fj31kw0q4tcq.jpg" alt="mage-20180413131142"></p></li></ol><p><img src="/images/loading.gif" data-original="https://tva1.sinaimg.cn/large/006tKfTcgy1fqaybxd88fj30sc104adx.jpg" alt="mage-20180413131224"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。Hexo相对于wordpress更加轻量，且不需要数据库，比较适合没有服务器的爱好者。以下是我自己实际安装部署的过程，分享给大家。&lt;br&gt;Github Pages可以被认为是用户编写的、托管在github上的静态网页。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="其他" scheme="https://huluohu.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    <category term="前端" scheme="https://huluohu.com/categories/%E5%85%B6%E4%BB%96/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="hexo" scheme="https://huluohu.com/tags/hexo/"/>
    
    <category term="github" scheme="https://huluohu.com/tags/github/"/>
    
    <category term="coding" scheme="https://huluohu.com/tags/coding/"/>
    
  </entry>
  
</feed>
